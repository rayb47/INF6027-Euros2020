combined_data <- bind_rows(group_stage_filtered, knockout_stage_filtered)
View(combined_data)
heatmap_data <- combined_data %>%
select(TeamName, Stage, avg_goals)
View(heatmap_data)
ggplot(heatmap_data, aes(x = Stage, y = TeamName, fill = BigChancesCreated)) +
geom_tile(color = "white") +
geom_text(aes(label = BigChancesCreated), color = "black", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Big Chances") +
labs(
title = "Heatmap of Big Chances Created by Top 8 Teams",
x = "Tournament Stage",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
ggplot(heatmap_data, aes(x = Stage, y = TeamName, fill = avg_goals)) +
geom_tile(color = "white") +
geom_text(aes(label = avg_goals), color = "black", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Big Chances") +
labs(
title = "Heatmap of Big Chances Created by Top 8 Teams",
x = "Tournament Stage",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
create_heatmap(combined_data, metric = "avg_goals", title = "Goals Scored by Top Teams")
source("functions.R")
create_heatmap(combined_data, metric = "avg_goals", title = "Goals Scored by Top Teams")
View(heatmap_data)
View(combined_data)
# Scatterplot
ggplot(combined_data, aes(x = abg_possession, y = avg_goals, color = TeamName)) +
geom_point(size = 4, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "black") +
facet_wrap(~ Stage) +
labs(
title = "Possession vs. Goals Scored by Stage",
x = "Possession (%)",
y = "Goals Scored",
color = "Team"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text = element_text(size = 10),
legend.position = "bottom"
)
# Scatterplot
ggplot(combined_data, aes(x = avg_possession, y = avg_goals, color = TeamName)) +
geom_point(size = 4, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "black") +
facet_wrap(~ Stage) +
labs(
title = "Possession vs. Goals Scored by Stage",
x = "Possession (%)",
y = "Goals Scored",
color = "Team"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text = element_text(size = 10),
legend.position = "bottom"
)
create_heatmap(combined_data, metric = "avg_goals", title = "Goals Scored by Top Teams")
ggplot(combined_data, aes(x = TeamName, y = avg_total_attempts, fill = Stage)) +
geom_boxplot(alpha = 0.8, outlier.color = "red", outlier.shape = 16) +
labs(
title = "Shots on Target by Team and Stage",
x = "Team",
y = "Shots on Target",
fill = "Stage"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
legend.position = "bottom"
)
View(detailed_match_team_stats)
ggplot(detailed_match_team_stats, aes(x = TeamName, y = `Total Attempts`, fill = Stage)) +
geom_boxplot(alpha = 0.8, outlier.color = "red", outlier.shape = 16) +
labs(
title = "Shots on Target by Team and Stage",
x = "Team",
y = "Shots on Target",
fill = "Stage"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
legend.position = "bottom"
)
# Scatterplot
ggplot(combined_data, aes(x = avg_possession, y = avg_goals, color = TeamName)) +
geom_point(size = 4, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "black") +
facet_wrap(~ Stage) +
labs(
title = "Possession vs. Goals Scored by Stage",
x = "Possession (%)",
y = "Goals Scored",
color = "Team"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text = element_text(size = 10),
legend.position = "bottom"
)
create_heatmap(combined_data, metric = "avg_goals", title = "Goals Scored by Top Teams")
# Define stats of interest
stats_of_interest <- c(
"Goals", "Goals conceded", "Ball Possession", "Corners", "Total Attempts", "Attempts on target",
"Tackles won", "Clearances", "Recovered balls", "Fouls committed",
"Passes completed", "Passes accuracy", "Attempts Accuracy", "Blocks",
"Lost balls", "Big Chances", "Instance of possession ", "Change of possession",
"Goals scored in open play", "Goals scored on direct free-kcik", "Goals scored on indirect free-kcik",
"Goals scored on penalty ", "Goals on corner ", "Own-goals",
"Goals conceded from open play ", "Goals conceded from set pieces",
"Goals conceded in penalty area", "Goals conceded outside penalty area",
"Yellow cards", "Total Attacks", "Attacks from centre", "Attacks from right", "Attacks from left"
)
# Create a single vector for numeric and N/A replacement
numeric_columns <- stats_of_interest
# Process data
detailed_match_team_stats <- match_team_statistics %>%
filter(StatsName %in% stats_of_interest) %>%
pivot_wider(names_from = StatsName, values_from = Value) %>%
left_join(match_information, by = "MatchID") %>%
mutate(
Stage = if_else(RoundName == "final tournament", "Group Stage", "Knockouts"),
across(all_of(numeric_columns), ~ as.numeric(.x)),
across(all_of(numeric_columns), ~ replace_na(.x, 0))
)
# Define groups of columns
sum_columns <- c(
"Goals", "Own-goals", "Corners", "Blocks", "Goals scored in open play",
"Goals scored on penalty ", "Goals scored on indirect free-kcik",
"Goals scored on direct free-kcik", "Goals on corner ", "Goals conceded",
"Goals conceded from open play ", "Goals conceded from set pieces",
"Goals conceded in penalty area", "Goals conceded outside penalty area",
"Passes completed", "Passes accuracy", "Ball Possession", "Total Attempts",
"Attempts Accuracy", "Lost balls", "Attempts on target", "Tackles won",
"Clearances", "Recovered balls", "Fouls committed", "Yellow cards",
"Total Attacks", "Big Chances", "Instance of possession ",
"Change of possession", "Attacks from centre", "Attacks from right", "Attacks from left"
)
# Summarize match statistics
detailed_match_team_stats <- detailed_match_team_stats %>%
group_by(MatchID, TeamName) %>%
summarize(across(all_of(sum_columns), ~ sum(.x, na.rm = TRUE), .names = "{.col}"), .groups = "drop") %>%
left_join(
detailed_match_team_stats %>%
select(MatchID, HomeTeamName.x, AwayTeamName.x, RoundName, Stage) %>%
distinct(),
by = "MatchID"
)
# Define average and specific calculations
avg_columns <- c(
"Goals", "Blocks", "Total Attempts", "Attempts Accuracy", "Passes completed",
"Passes accuracy", "Ball Possession", "Total Attacks", "Lost balls",
"Tackles won", "Recovered balls", "Fouls committed", "Clearances",
"Yellow cards", "Goals conceded", "Attacks from centre", "Attacks from right", "Attacks from left"
)
# Summarize team tournament stats
team_tournament_stats <- detailed_match_team_stats %>%
group_by(TeamName) %>%
summarize(
# Compute averages for listed columns
across(
all_of(avg_columns),
~ mean(.x, na.rm = TRUE),
.names = "{str_replace_all(.col, ' ', '')}"
),
# Compute specific custom calculations
avg_fouls_per_yellow_card = ifelse(mean(`Yellow cards`, na.rm = TRUE) == 0, NA, mean(`Fouls committed`, na.rm = TRUE) / mean(`Yellow cards`, na.rm = TRUE)),
avg_inst_poss = mean(`Instance of possession `, na.rm = TRUE),
avg_change_poss = mean(`Change of possession`, na.rm = TRUE),
# c_open_play_goals = sum(`Goals conceded from open play `, na.rm = TRUE),
# c_set_piece_goals = sum(`Goals conceded from set pieces`, na.rm = TRUE),
# c_pen_area_goals = sum(`Goals conceded in penalty area`, na.rm = TRUE),
# c_outside_pen_area_goals = sum(`Goals conceded outside penalty area`, na.rm = TRUE),
.groups = "drop"
)
View(team_tournament_stats)
View(team_tournament_stats)
heatmap_attacks_data <- team_tournament_stats %>%
pivot_longer(
cols = starts_with("Attacks"),
names_to = "AttackDirection",
values_to = "AttackCount"
)
View(heatmap_attacks_data)
ggplot(heatmap_data, aes(x = AttackDirection, y = TeamName, fill = AttackCount)) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "black", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
heatmap_attacks_data <- team_tournament_stats %>%
pivot_longer(
cols = starts_with("Attacks"),
names_to = "AttackDirection",
values_to = "AttackCount"
)
ggplot(heatmap_data, aes(x = AttackDirection, y = TeamName, fill = AttackCount)) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "black", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
ggplot(heatmap_attacks_data, aes(x = AttackDirection, y = TeamName, fill = AttackCount)) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "black", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
heatmap_attacks_data <- team_tournament_stats %>%
filter(TeamName %in% qualified_teams) %>%
pivot_longer(
cols = starts_with("Attacks"),
names_to = "AttackDirection",
values_to = "AttackCount"
)
ggplot(heatmap_attacks_data, aes(x = AttackDirection, y = TeamName, fill = AttackCount)) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "black", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
ggplot(heatmap_attacks_data, aes(x = AttackDirection, y = TeamName, fill = round(AttackCount,2))) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "black", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
View(heatmap_attacks_data)
ggplot(heatmap_attacks_data, aes(x = AttackDirection, y = TeamName, fill = round(AttackCount,2))) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "black", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
heatmap_attacks_data <- team_tournament_stats %>%
mutate(across(starts_with("Attacks"), ~ round(.x, 2))) %>%
filter(TeamName %in% qualified_teams) %>%
pivot_longer(
cols = starts_with("Attacks"),
names_to = "AttackDirection",
values_to = "AttackCount"
)
ggplot(heatmap_attacks_data, aes(x = AttackDirection, y = TeamName, fill = AttackCount)) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "black", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
# Define stats of interest
stats_of_interest <- c(
"Goals", "Goals conceded", "Ball Possession", "Corners", "Total Attempts", "Attempts on target",
"Tackles won", "Clearances", "Recovered balls", "Fouls committed",
"Passes completed", "Passes accuracy", "Attempts Accuracy", "Blocks",
"Lost balls", "Big Chances", "Instance of possession ", "Change of possession",
"Goals scored in open play", "Goals scored on direct free-kcik", "Goals scored on indirect free-kcik",
"Goals scored on penalty ", "Goals on corner ", "Own-goals",
"Goals conceded from open play ", "Goals conceded from set pieces",
"Goals conceded in penalty area", "Goals conceded outside penalty area",
"Yellow cards", "Total Attacks", "Attacks from left", "Attacks from centre", "Attacks from right"
)
# Create a single vector for numeric and N/A replacement
numeric_columns <- stats_of_interest
# Process data
detailed_match_team_stats <- match_team_statistics %>%
filter(StatsName %in% stats_of_interest) %>%
pivot_wider(names_from = StatsName, values_from = Value) %>%
left_join(match_information, by = "MatchID") %>%
mutate(
Stage = if_else(RoundName == "final tournament", "Group Stage", "Knockouts"),
across(all_of(numeric_columns), ~ as.numeric(.x)),
across(all_of(numeric_columns), ~ replace_na(.x, 0))
)
# Define groups of columns
sum_columns <- c(
"Goals", "Own-goals", "Corners", "Blocks", "Goals scored in open play",
"Goals scored on penalty ", "Goals scored on indirect free-kcik",
"Goals scored on direct free-kcik", "Goals on corner ", "Goals conceded",
"Goals conceded from open play ", "Goals conceded from set pieces",
"Goals conceded in penalty area", "Goals conceded outside penalty area",
"Passes completed", "Passes accuracy", "Ball Possession", "Total Attempts",
"Attempts Accuracy", "Lost balls", "Attempts on target", "Tackles won",
"Clearances", "Recovered balls", "Fouls committed", "Yellow cards",
"Total Attacks", "Big Chances", "Instance of possession ",
"Change of possession", "Attacks from left", "Attacks from centre", "Attacks from right"
)
# Summarize match statistics
detailed_match_team_stats <- detailed_match_team_stats %>%
group_by(MatchID, TeamName) %>%
summarize(across(all_of(sum_columns), ~ sum(.x, na.rm = TRUE), .names = "{.col}"), .groups = "drop") %>%
left_join(
detailed_match_team_stats %>%
select(MatchID, HomeTeamName.x, AwayTeamName.x, RoundName, Stage) %>%
distinct(),
by = "MatchID"
)
# Define average and specific calculations
avg_columns <- c(
"Goals", "Blocks", "Total Attempts", "Attempts Accuracy", "Passes completed",
"Passes accuracy", "Ball Possession", "Total Attacks", "Lost balls",
"Tackles won", "Recovered balls", "Fouls committed", "Clearances",
"Yellow cards", "Goals conceded", "Attacks from left", "Attacks from centre", "Attacks from right"
)
# Summarize team tournament stats
team_tournament_stats <- detailed_match_team_stats %>%
group_by(TeamName) %>%
summarize(
# Compute averages for listed columns
across(
all_of(avg_columns),
~ mean(.x, na.rm = TRUE),
.names = "{str_replace_all(.col, ' ', '')}"
),
# Compute specific custom calculations
avg_fouls_per_yellow_card = ifelse(mean(`Yellow cards`, na.rm = TRUE) == 0, NA, mean(`Fouls committed`, na.rm = TRUE) / mean(`Yellow cards`, na.rm = TRUE)),
avg_inst_poss = mean(`Instance of possession `, na.rm = TRUE),
avg_change_poss = mean(`Change of possession`, na.rm = TRUE),
# c_open_play_goals = sum(`Goals conceded from open play `, na.rm = TRUE),
# c_set_piece_goals = sum(`Goals conceded from set pieces`, na.rm = TRUE),
# c_pen_area_goals = sum(`Goals conceded in penalty area`, na.rm = TRUE),
# c_outside_pen_area_goals = sum(`Goals conceded outside penalty area`, na.rm = TRUE),
.groups = "drop"
)
# Computes group stage metrics
group_stage_metrics <- calculate_stagewise_metrics(detailed_match_team_stats, "Group Stage")
m
heatmap_attacks_data <- team_tournament_stats %>%
mutate(across(starts_with("Attacks"), ~ round(.x, 2))) %>%
filter(TeamName %in% qualified_teams) %>%
pivot_longer(
cols = starts_with("Attacks"),
names_to = "AttackDirection",
values_to = "AttackCount"
)
ggplot(heatmap_attacks_data, aes(x = AttackDirection, y = TeamName, fill = AttackCount)) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "black", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
View(detailed_match_team_stats)
View(heatmap_attacks_data)
ggplot(heatmap_attacks_data, aes(x = AttackDirection, y = TeamName, fill = AttackCount)) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "yellow", fontface = "bold", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
ggplot(heatmap_attacks_data, aes(x = AttackDirection, y = TeamName, fill = AttackCount)) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "green3", fontface = "bold", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
ggplot(heatmap_attacks_data, aes(x = AttackDirection, y = TeamName, fill = AttackCount)) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "yellow", fontface = "bold", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
ggplot(heatmap_attacks_data, aes(x = AttackDirection, y = TeamName, fill = AttackCount)) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "yellow3", fontface = "bold", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
ggplot(heatmap_attacks_data, aes(x = AttackDirection, y = TeamName, fill = AttackCount)) +
geom_tile(color = "white") +
geom_text(aes(label = AttackCount), color = "yellow2", fontface = "bold", size = 4) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Attack Count") +
labs(
title = "Heatmap of Attacking Directions by Top 8 Teams",
x = "Attack Direction",
y = "Team Name"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
)
View(combined_data)
create_heatmap(combined_data, metric = "avg_fouls", title = "Goals Scored by Top Teams")
View(detailed_match_team_stats)
